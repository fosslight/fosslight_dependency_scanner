# 1. Update changelog
# 2. Build the exe file and upload it in the release assets.
# 3. Upload a Python Package using Twine

name: Release fosslight_dependency

on:
  release:
    types: [published]

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main
    - name: Get Release
      uses: bruceadams/get-release@v1.3.2
      id: get_release
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Bump up version
      env:
        NEW_TAG: ${{ steps.get_release.outputs.tag_name }}
      run: |
        pip install --upgrade bumpversion
        LAST_TWO_TAGS=$(git for-each-ref refs/tags/ --count=2 --sort=-v:refname --format="%(refname:short)")
        LAST_ONE=$(echo $LAST_TWO_TAGS | cut -d' ' -f 2)
        last_version=$(echo ${LAST_ONE//v/""})
        echo Last version: ${last_version}
        new_version=$(echo ${NEW_TAG//v/""})
        echo New version: ${new_version}
        git config --global user.name "github-actions[bot]"
        git config --global user.email "fosslight-dev@lge.com"
        bumpversion --current-version $last_version --new-version $new_version setup.py
    - name: update changelog with gren
      env:
        GREN_GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        npm install github-release-notes@0.17.3
        node_modules/.bin/gren changelog --override
    - name: Commit files
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "fosslight-dev@lge.com"
        git add CHANGELOG.md
        git commit -m "Update ChangeLog"
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.TOKEN }}
        branch: main
  
  build:
    needs: update-changelog
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main
    - name: Set up Python3
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pyinstaller
        
    - name: Build exe with PyInstaller for windows
      run: |
        pyinstaller --onefile cli.py -n cli --additional-hooks-dir=hooks --add-binary "LICENSE;LICENSES" --add-binary "LICENSES\LicenseRef-3rd_party_licenses.txt;LICENSES" --collect-datas fosslight_util --hidden-import=_cffi_backend
        mkdir out
        move dist/cli.exe fosslight_dependency_windows.exe
                
    - name: Upload release file
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./fosslight_dependency_windows.exe
        asset_name: fosslight_dependency_windows.exe
        asset_content_type: application/octet-stream

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main
    - name: Set up Python3
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
